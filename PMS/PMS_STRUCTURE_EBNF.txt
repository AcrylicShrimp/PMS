PROGRAM ::=
	{LINE}
	
LINE ::=
	DIRECTIVE |
	STATEMENT
	
DIRECTIVE ::=
	MODULE_DIRECTIVE |
	CONSTANT_DIRECTIVE
	
MODULE_DIRECTIVE ::=
	"module" [IDENTIFIER {"." IDENTIFIER}] ";"
	
CONSTANT_DIRECTIVE ::=
	"const" IDENTIFIER "=" CONSTANT_EXPRESSION;
	
STATEMENT ::=
	IF_STATEMENT |
	FOR_STATEMENT |
	REPEAT_STATEMENT |
	BLOCK_STATEMENT |
	FUNC_DECL_STATEMENT |
	STRUCT_DECL_STATEMENT |
	SINGLE_STATEMENT |
	EXPRESSION ";"
	
IF_STATEMENT ::=
	"if" EXPRESSION "->" STATEMENT ["else" STATEMENT]
	
FOR_STATEMENT ::=
	"for" [IDENTIFIER ":"] EXPRESSION "->" STATEMENT
	
REPEAT_STATEMENT ::=
	"repeat" EXPRESSION "->" STATEMENT
	
BLOCK_STATEMENT ::=
	"{" {STATEMENT} "}"
	
FUNC_DECL_STATEMENT ::=
	"func" IDENTIFIER "(" PARAMETER_DECL_STATEMENT ")" "->" STATEMENT
	
PARAMETER_DECL_STATEMENT ::=
	[IDENTIFIER {"," IDENTIFIER}]
	
STRUCT_DECL_STATEMENT ::=
	"struct" 
	
SINGLE_STATEMENT ::=
	RETURN_STATEMENT |
	BREAK_STATEMENT |
	CONTINUE_STATEMENT
	
RETURN_STATEMENT ::=
	"return" [EXPRESSION] ";"
	
BREAK_STATEMENT ::=
	"break" ";"
	
CONTINUE_STATEMENT ::=
	"continue" ";"

EXPRESSION ::= COMMA_EXPRESSION

COMMA_EXPRESSION ::=
	ASSIGN_EXPRESSION {"," ASSIGN_EXPRESSION}
	
ASSIGN_EXPRESSION ::=
	OR_EXPRESSION [
		("=" |
		"+=" |
		"-=" |
		"*=" |
		"**=" |
		"/=" |
		"%=" |
		"<<=" |
		">>=" |
		"&=" |
		"^=" |
		"|="
		"<-") ASSIGN_EXPRESSION]
	
OR_EXPRESSION ::=
	AND_EXPRESSION {"||" AND_EXPRESSION}
	
AND_EXPRESSION ::=
	COMPARE_EXPRESSION {"&&" COMPARE_EXPRESSION}
	
OR_BIT_EXPRESSION ::=
	AND_BIT_EXPRESSION {"|" AND_BIT_EXPRESSION}
	
XOR_BIT_EXPRESSION ::=
	AND_BIT_EXPRESSION {"^" AND_BIT_EXPRESSION}
	
AND_BIT_EXPRESSION ::=
	COMPARE_EXPRESSION {"&" COMPARE_EXPRESSION}
	
COMPARE_EXPRESSION ::=
	AMOUNT_EXPRESSION {("==" | "!=") AMOUNT_EXPRESSION}
	
AMOUNT_EXPRESSION ::=
	SHIFT_EXPRESSION {("<" | "<=" | ">" | ">=") SHIFT_EXPRESSION}
	
SHIFT_EXPRESSION ::=
	ADD_EXPRESSION {("<<" | ">>") ADD_EXPRESSION}
	
ADD_EXPRESSION ::=
	MUL_EXPRESSION {("+" | "-") MUL_EXPRESSION}
	
MUL_EXPRESSION ::=
	POWER_EXPRESSION {("*" | "/" | "%") POWER_EXPRESSION}
	
POWER_EXPRESSION ::=
	ACCESS_EXPRESSION {"**" ACCESS_EXPRESSION}
	
ACCESS_EXPRESSION ::=
	FRONT_EXPRESSION {"." FRONT_EXPRESSION}
	
FRONT_EXPRESSION ::=
	FRONT_CREASE_EXPRESSION |
	SIGN_EXPRESSION |
	NOT_EXPRESSION |
	CAST_EXPRESSION |
	BACK_CREASE_EXPRESSION
	
FRONT_CREASE_EXPRESSION ::=
	("++" | "--") FRONT_EXPRESSION
	
SIGN_EXPRESSION ::=
	("+" | "-") FRONT_EXPRESSION
	
NOT_EXPRESSION ::=
	"!" FRONT_EXPRESSION
	
CAST_EXPRESSION ::=
	TYPENAME BRACKET_EXPRESSION
	
BACK_CREASE_EXPRESSION ::=
	(BRACKET_EXPRESSION |
	REFERENCE_EXPRESSION |
	CALL_EXPRESSION |
	VALUE_EXPRESSION) ["++" | "--"]
	
BRACKET_EXPRESSION ::=
	"(" EXPRESSION ")"
	
REFERENCE_EXPRESSION ::=
	"ref" IDENTIFIER
	
CALL_EXPRESSION ::=
	IDENTIFIER "(" PARAMETER_PASS_EXPRESSION ")" {"(" PARAMETER_PASS_EXPRESSION ")"}

PARAMETER_PASS_EXPRESSION ::=
	[EXPRESSION {"," EXPRESSION}]
	
VALUE_EXPRESSION ::=
	IDENTIFIER |
	RANGE_EXPRESSION |
	LIST_EXPRESSION |
	CONSTANT_EXPRESSION

RANGE_EXPRESSION ::=
	"[" ["^"] EXPRESSION ["," ["^"] EXPRESSION] "]"
	
LIST_EXPRESSION ::=
	"<" [EXPRESSION {"," EXPRESSION}] ">"
	
CONSTANT_EXPRESSION ::=
	INTEGER_EXPRESSION |
	REAL_EXPRESSION |
	STRING_EXPRESSION
	
INTEGER_EXPRESSION ::=
	BINARY_EXPRESSION |
	DECIMAL_EXPRESSION |
	HEXADECIMAL_EXPRESSION
	
BINARY_EXPRESSION ::=
	["+" | "-"] "0" ("b" | "B") BINARY_ELEMENT_EXPRESSION {BINARY_ELEMENT_EXPRESSION}
	
BINARY_ELEMENT_EXPRESSION ::=
	"0" | "1"
	
DECIMAL_EXPRESSION ::=
	["+" | "-"] BINARY_ELEMENT_EXPRESSION {BINARY_ELEMENT_EXPRESSION}
	
DECIMAL_ELEMENT_EXPRESSION ::=
	BINARY_ELEMENT_EXPRESSION |
	"2" |
	"3" |
	"4" |
	"5" |
	"6" |
	"7" |
	"8" |
	"9"
	
HEXADECIMAL_EXPRESSION ::=
	["+" | "-"] "0" ("x" | "X") HEXADECIMAL_ELEMENT_EXPRESSION {HEXADECIMAL_ELEMENT_EXPRESSION}
	
HEXADECIMAL_ELEMENT_EXPRESSION ::=
	DECIMAL_ELEMENT_EXPRESSION |
	"a" |
	"b" |
	"c" |
	"d" |
	"e" |
	"f" |
	"A" |
	"B" |
	"C" |
	"D" |
	"E" |
	"F"
	
REAL_EXPRESSION ::=
	["+" | "-"] {DECIMAL_ELEMENT_EXPRESSION} ["."] DECIMAL_ELEMENT_EXPRESSION {DECIMAL_ELEMENT_EXPRESSION} [("e" | "E") ["+" | "-"] DECIMAL_ELEMENT_EXPRESSION {DECIMAL_ELEMENT_EXPRESSION}]
	
STRING_EXPRESSION ::=
	"'" {ANY_CHARACTER} "'"
	
TYPENAME ::=
	"int" |
	"real" |
	"str" |
	"list"